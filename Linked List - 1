//

#include<iostream>
#include<vector>
using namespace std;

class Term
{
	int coeff;
	char var;
	int exp;
	bool added;
	Term* next;
public:
	Term() :coeff(NULL), var(NULL), exp(NULL), added(false), next(NULL) {}
	Term(int c, char v, int e) :coeff(c), var(v), exp(e), added(false), next(NULL) {}
	friend class Polynomial;
};

class Polynomial
{
	Term* head;
	Term* tail;
	Term* temp1;
	Term* temp2;

public:
	Polynomial()
	{
		head = NULL;
		tail = NULL;
		temp1 = NULL;
		temp2 = NULL;
	}

	void addTerm(int c, char v, int e)
	{
		Term* newTerm = new Term(c, v, e);

		if (head == NULL)
		{
			head = newTerm;
			tail = head;
			return;
		}

		tail->next = newTerm;
		tail = tail->next;
	}

	Polynomial operator+(Polynomial const& p) {
		temp1 = this->head;

		while (temp1) {
			temp2 = p.head;
			while (temp2) {
				if (temp1->var == temp2->var && temp1->exp == temp2->exp) {
					temp2->added = true;
					temp1->coeff = temp1->coeff + temp2->coeff;
					break;
				}
				temp1->added = true;
				temp2 = temp2->next;
			}
			temp1 = temp1->next;
		}

		temp1 = p.head;
		while (temp1) {
			if (!temp1->added) {
				this->tail->next = temp1;
				this->tail = this->tail->next;
				this->tail->next = NULL;
			}
			temp1 = temp1->next;
		}
		return *this;
	}

	void swap(Term* a, Term* b)
	{
		char c = a->coeff;
		char v = a->var;
		char e = a->exp;

		a->coeff = b->coeff;
		a->var = b->var;
		a->exp = b->exp;

		b->coeff = c;
		b->var = v;
		b->exp = e;
	}

	void sortVar()
	{
		vector<char>vars;
		temp1 = head;
		vars.push_back(temp1->var);
		char tempVar;
		while (temp1 != NULL)
		{
			int i;
			for (i = 0; i < vars.size(); i++)
				if (temp1->var == vars[i])
					break;
			if (i == vars.size())
				vars.push_back(temp1->var);

			temp1 = temp1->next;
		}
		for (int i = 0; i < vars.size() - 1; i++) {
			for (int j = 0; j < vars.size() - i - 2; j++) {
				if (vars[j] > vars[j + 1]) {
					char temp = vars[j];
					vars[j] = vars[j + 1];
					vars[j + 1] = temp;
				}
			}
		}
		//Selection Sort
		temp1 = head;
		while (temp1 != tail) {
			temp2 = temp1->next;
			while (temp2 != NULL) {
				if (temp2->var < temp1->var) {
					swap(temp1, temp2);
				}
				temp2 = temp2->next;
			}
			temp1 = temp1->next;
		}

		temp1 = head;
		for (int i = 0; i < vars.size(); i++) {
			while (temp1 != NULL && temp1->var == vars[i]) {
				temp2 = temp1;
				while (temp2 != NULL && temp2->var == vars[i]) {
					if (temp2->exp < temp1->exp)
						swap(temp1, temp2);
					temp2 = temp2->next;
				}
				temp1 = temp1->next;
			}
		}
	}

	void display()
	{
		temp1 = head;
		int count = 0;
		while (temp1 != NULL) {
			temp1 = temp1->next;
			count++;
		}
		temp1 = head;
		cout << count << endl;
		while (temp1 != NULL) {
			cout << temp1->coeff << " " << temp1->var << " " << temp1->exp << endl;
			temp1 = temp1->next;
		}
	}
};

int main()
{
	Polynomial p1, p2;
	int n;
	int c;
	char v;
	int e;

	for (int j = 0; j < 2; j++) {
		cin >> n;
		for (int i = 0; i < n; i++) {
			cin >> c >> v >> e;
			/*cin.ignore();
			c = cin.get();
			cin.ignore();
			v = cin.get();
			cin.ignore();
			e = cin.get();*/
			if (j == 0)
				p1.addTerm(c, v, e);
			if (j == 1)
				p2.addTerm(c, v, e);
			//cout << endl << c << " " << v << " " << e;
		}
	}
	p1 = p1 + p2;
	p1.sortVar();
	p1.display();
}
